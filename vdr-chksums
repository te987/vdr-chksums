#!/usr/bin/env perl

=pod

=head1 NAME

vdr-chksums - A Perl script to verify debian repository checksums.

=head1 SYNOPSIS

vdr-chksums [configuration_file] [options]

=head1 DESCRIPTION

Indepentent verification of debian repository size, md5, and sha256 checksums.
vdr-chksums is useful when mirror operations are interrupted, or have to be
downloaded in sections or when doing distribution updates.
vdr-chksums can do a db cache for faster re-run speeds on mirror updates.
vdr-chksums can also provide a bad checksum file to remove or verify errors.


=head1 COMMENTS

 vdr-chksums -h for usage
 Using Packages:
  findutils, find:   error reporting
  coreutils, mkdir:  make db file path
  gzip,      gunzip: uncompress Packages.gz files
  xz-utils,  unxz:   uncompress Packages.xz files
  recommend: libpod-markdown-perl, pod2markdown
 For this script, not using perl's default implied variables

=head1 FILES

F<~/.local/share/vdr_checksum/var_db.[checksum_mode].bz2>
   - bzip2 db cache

F<~/.local/share/vdr_config>
   - configuration

=head1 OPTIONS

 Checksum files to verify repository integrity

 -r  repository path
      default: '/srv/dmirror'
      A directory path to a valid debian repository.
      vdr_config: set repo_path /srv/mirror

 -w  number of worker processes
      default: 1    [1..128]
      Value depends on harware like cpu cores, drives.
      Recommend: SSDrive=1-4, spinning HDrive=1
      vdr_config: set worker_cnt 4

 -c  checksum mode
      default: size    [size md5 sha256]
      Selects a checksum mode based on speed or need.
      size - quick file size checksums
      md5, sha256 - digest hash checksums
      vdr_config: set checksum_mode sha256

 -m  toggles db mode
      default: disabled
      Enables db cache checksum mode
      Uses toggle mode so config file setting can be over-ridden
      Current checksum mode selects db checksum type.
      Current arch mode selects db arch type(s).
      Uses -b option.
      vdr_config: set db_mode 1

 -b  db file,  path/basename or path/:
      default: '~/.local/share/vdr_checksum/vdr_db'
      An extension [_arch_mode][.checksum_mode].bz2 is auto-added.
      Needs basename unless you want [_arch_mode] as basename.
      This bzip2 file caches good checksums of repository files
      so only new files are checksumed.
      Used by -m option.
      vdr_config: set db_file ~/opt/vdr_checksums/mirror/bam

 -e  erase db file based on current arch and checksum type.
      It will erase file and exit.
      Uses -m option to activate. (No Prompting)

 -f  configuration file, or autoloads default path/file
      default: '~/.local/share/vdr_config'
      Note: no file testing so -f 'void' will disable autoload
      Uses %config (keys, values).
      config file format: set  key  value
      'set' must be 1st word delimited by white space.

 -p  package uncompress mode
      default: xz    [none gz xz]
      Selects [Packages Packages.gz Packages.xz]
      for lookup checksums.
      vdr_config: set pkage_cmprs_mode gz

 -a  architecture mode
      For checksums of repositories by arch types.
      default: multi   [multi all amd64, etc]
      multi - a dummy to catch every arch type as in pool/*/*_*.deb
      all   - as in pool/*/*_all.deb, (docs, non-cpu-specific)
      amd64 - as in pool/*/*_amd64.deb (binary-code, cpu-specific)
      Unless using multi you must include arch all either by itself
      or with another arch type to do a full check.
      Arch mode can be a comma delimited, no spaces, list.
      Arch mode is not validated, so get it right.
      vdr_config: set arch_mode all,amd64

 -o  checksum error shell script path/filename
      default: '~/remove-vdr-chksum-errors.sh'
      Path and filename are not validated.
      vdr_config: set err_file ~/my_chksum_errors.sh

 -s  toggles creation of checksum error shell script
      default: disabled
      The script has no execute permissions.
      The script removes repository files with bad checksums.
      The mirroring software can be rerun to load correct files.
      The script contains only files with checksum errors and
      not package key errors.
      vdr_config: set err_mode 1

 -k  toggles Release/InRelase mode
      default: Release
      use Release or InRelease files for checksums
      vdr_config: set release_mode 1

 -t  toggles content checksum mode
      default: disabled
      Uses Release/InRelease SHA256 lookups to checksum Contents files
      vdr_config: set content_checksum_mode 1

 -i  toggles i18n translation checksum mode
      default: disabled
      Uses Release/InRelease SHA256 lookups to checksum i18n/ files
      vdr_config: set i18n_checksum_mode 1

 -V  returns only software version number string
      needed by Makefile

 -v, --version  program name software version

 -h, --help  Shows usage and configuration.

=head1 EXAMPLES

=head2 CONFIGURATION

 #  vdr_config example
 set  repo_path  /svr/mirror
 # set  db_mode  1
 set  db_file  ~/.local/share/vdr_checksums/mirror/db
 set  worker_cnt  4
 # set err_mode 1

=head2 OPTIONS

 vdr-chksums -f ~/.local/share/buster_vdr_config -m -c sha256 -s

=head1 AUTHOR

Terry Embry, KJ4EED <mrtembry@gmail.com>

=cut

use warnings;
use strict;
use Getopt::Std qw(getopts);
use File::Find qw(find);
use File::Basename qw(fileparse);
use Digest::file qw(digest_file_hex);
use Pod::Usage qw(pod2usage);
use IO::Compress::Bzip2 qw($Bzip2Error);
use IO::Uncompress::Bunzip2;

my $software_version = '0.9.17';

#   do NOT change types positions...
my @checksum_types         = qw/size md5 sha256/;
my @pkage_uncompress_types = qw/none gz xz/;

#   arch_types starting point, set_config does not validate values
#   multi is dummy for every architecture type
my @arch_types = qw/multi all amd64 i386 powerpc armel/;

#   min=list[0] >= value <= max=list[1]
my @bool_range   = qw/0 1/;
my @worker_range = qw/1 128/;

#   db_file has path/filename, ext of _{arch_mode}.{checksum_mode}.bz2
my %config = (
    'repo_path'             => '/srv/dmirror',
    'checksum_mode'         => $checksum_types[0],
    'worker_cnt'            => 1,
    'db_mode'               => 0,
    'db_file'               => "$ENV{HOME}/.local/share/vdr_checksum/vdr_db",
    'cfg_file'              => "$ENV{HOME}/.local/share/vdr_config",
    'pkage_cmprs_mode'      => $pkage_uncompress_types[2],
    'arch_mode'             => $arch_types[0],
    'err_file'              => "$ENV{HOME}/remove-vdr-chksum-errors.sh",
    'err_mode'              => 0,
    'release_mode'          => 0,
    'content_checksum_mode' => 0,
    'i18n_checksum_mode'    => 0,
);

my @packages = ();
my @pools    = ();

my %package_checksum = ();
my %pool_checksum    = ();

my @dist_releases         = ();
my %dist_release_checksum = ();
my @dist_contents         = ();
my @dist_i18n             = ();

my @child_list;

#   read, write pipe lists
my ( @rdrs, @wrtrs );

#   producer read write, pipe lists
my ( @prdcr_rdrs, @prdcr_wrtrs );

my ( $pool_pattern, $package_pattern, $release_pattern );
my ( $content_pattern, $i18n_pattern );

# +++ subs +++
sub get_list_ref {
    my $target = shift @_;

    if ( 'pools' eq $target ) {
        return \@pools;
    }
    elsif ( 'packages' eq $target ) {
        return \@packages;
    }
    elsif ( 'checksum_types' eq $target ) {
        return \@checksum_types;
    }
    elsif ( 'pkage_uncompress_types' eq $target ) {
        return \@pkage_uncompress_types;
    }
    elsif ( 'arch_types' eq $target ) {
        return \@arch_types;
    }
    elsif ( 'bool_range' eq $target ) {
        return \@bool_range;
    }
    elsif ( 'worker_range' eq $target ) {
        return \@worker_range;
    }
    elsif ( 'dist_releases' eq $target ) {
        return \@dist_releases;
    }
    elsif ( 'dist_contents' eq $target ) {
        return \@dist_contents;
    }
    elsif ( 'dist_i18n' eq $target ) {
        return \@dist_i18n;
    }
    else {
        die "Error!  unknown target list: $target";
    }
}

sub is_inlist {
    my ( $value, $list_name ) = @_;

    my $lref = get_list_ref($list_name);
    my @test = grep /\b${value}\b/, @$lref;
    if ( scalar @test ) {
        return 1;
    }
    else {
        return 0;
    }
}

sub is_inrange {
    my ( $value, $list_name ) = @_;

    my $lref = get_list_ref($list_name);
    if ( $value >= $$lref[0] and $value <= $$lref[1] ) {
        return 1;
    }
    else {
        return 0;
    }
}

sub expand_tilde {
    my $str = shift @_;

    my $home = $ENV{HOME};
    $str =~ s/~/$home/;
    return $str;
}

#   die if not in config or misspelled
sub get_config {
    my $key = shift @_;

    if ( exists $config{$key} ) {
        return $config{$key};
    }
    else {
        die "get_config: unknown config key: $key";
    }
}

#   warn if not in config, misspelled
#   die if unimplemented
sub set_config {
    my ( $key, $value ) = @_;
    my $emsg = "set_config Error!";

    if ( exists $config{$key} ) {
        if ( 'cfg_file' eq $key ) {

            #   no file testing
            $value = expand_tilde($value);
            $config{$key} = $value;
        }
        elsif ( 'arch_mode' eq $key ) {
            $config{$key} = $value;
        }
        elsif ( 'checksum_mode' eq $key ) {
            if ( is_inlist( $value, 'checksum_types' ) ) {
                $config{$key} = $value;
            }
            else {
                die "$emsg $key invalid type: $value";
            }
        }
        elsif ( 'db_file' eq $key ) {
            $value = expand_tilde($value);
            $config{$key} = $value;
        }
        elsif ( 'db_mode' eq $key ) {
            $value = int $value;
            if ( is_inrange( $value, 'bool_range' ) ) {
                $config{$key} = $value;
            }
            else { die "$emsg $key invalid range: $value"; }
        }
        elsif ( 'repo_path' eq $key ) {
            $value = expand_tilde($value);
            if ( -d $value ) {
                $config{$key} = $value;
            }
            else {
                die "$emsg $key is not a directory: $value";
            }
        }
        elsif ( 'worker_cnt' eq $key ) {
            $value = int $value;
            if ( is_inrange( $value, 'worker_range' ) ) {
                $config{$key} = $value;
            }
            else {
                die "$emsg $key invalid range: $value";
            }
        }
        elsif ( 'pkage_cmprs_mode' eq $key ) {
            if ( is_inlist( $value, 'pkage_uncompress_types' ) ) {
                $config{$key} = $value;
            }
            else {
                die "$emsg $key invalid type: $value";
            }
        }
        elsif ( 'err_file' eq $key ) {
            $value = expand_tilde($value);
            $config{$key} = $value;
        }
        elsif ( 'err_mode' eq $key ) {
            $value = int $value;
            if ( is_inrange( $value, 'bool_range' ) ) {
                $config{$key} = $value;
            }
            else { die "$emsg $key invalid range: $value"; }
        }
        elsif ( 'release_mode' eq $key ) {
            $value = int $value;
            if ( is_inrange( $value, 'bool_range' ) ) {
                $config{$key} = $value;
            }
            else { die "$emsg $key invalid range: $value"; }
        }
        elsif ( 'content_checksum_mode' eq $key ) {
            $value = int $value;
            if ( is_inrange( $value, 'bool_range' ) ) {
                $config{$key} = $value;
            }
            else { die "$emsg $key invalid range: $value"; }
        }
        elsif ( 'i18n_checksum_mode' eq $key ) {
            $value = int $value;
            if ( is_inrange( $value, 'bool_range' ) ) {
                $config{$key} = $value;
            }
            else { die "$emsg $key invalid range: $value"; }
        }
        else {
            die "$emsg: unimplemented config key: $key";
        }
    }
    else {
        warn "set_config: unknown config key: $key";
    }
}

sub usage {
    pod2usage(
        -verbose  => 99,
        -exitval  => "NOEXIT",
        -sections => "OPTIONS|EXAMPLES"
    );
    show_config();
    exit 2;
}

sub show_config {
    my $dbmsg  = get_config('db_mode')               ? 'enabled' : 'disabled';
    my $errmsg = get_config('err_mode')              ? 'enabled' : 'disabled';
    my $relmsg = get_config('release_mode')          ? 'InRelease' : 'Release';
    my $conmsg = get_config('content_checksum_mode') ? 'enabled' : 'disabled';
    my $i18msg = get_config('i18n_checksum_mode')    ? 'enabled' : 'disabled';
    print "==== config =======================\n";
    print "  -w worker count:     " . get_config('worker_cnt') . "\n";
    print "  -c checksum mode:    " . get_config('checksum_mode') . "\n";
    print "  -p pkage cmprs mode: " . get_config('pkage_cmprs_mode') . "\n";
    print "  -m db mode:          " . $dbmsg . "\n";
    print "  -a arch mode:        " . get_config('arch_mode') . "\n";
    print "  -b db file:          " . get_config('db_file') . "\n";
    print "  -f config file:      " . get_config('cfg_file') . "\n";
    print "  -r repository path:  " . get_config('repo_path') . "\n";
    print "  -o errors file:      " . get_config('err_file') . "\n";
    print "  -s error script:     " . $errmsg . "\n";
    print "  -k release mode:          " . $relmsg . "\n";
    print "  -t content checksum mode: " . $conmsg . "\n";
    print "  -i i18n checksum mode:    " . $i18msg . "\n";
    print "==== software version: $software_version ====\n\n";
}

#   return empty hash if open fails
sub read_config_file {
    my $file = shift @_;

    my %newcfg = ();
    open( my $src, "<", $file ) or return %newcfg;
    while ( defined( my $line = <$src> ) ) {
        chomp $line;
        if ( $line =~ /^set\s+/o ) {
            my ( undef, $key, $value ) = split /\s+/o, $line;
            $newcfg{$key} = $value;
        }
        else {
            next;
        }
    }
    close_handle( "Abort! Failed to close $file", $src );
    return %newcfg;
}

#   empty hash, silently skip config sets
sub update_config : prototype(\%) {
    my $newcfg_ref = shift @_;

    #   not allowed in configuration file
    my $not_allowed = 'cfg_file ';
    while ( my ( $key, $value ) = each %$newcfg_ref ) {
        unless ( $not_allowed =~ $key ) {
            set_config( $key, $value );
        }
        else {
            warn "update_config: set $key not allowed in config file";
        }
    }
}

sub add_db_file_ext {
    my ( $file, $checksum_mode, $cfg_arch ) = @_;

    if ( $cfg_arch =~ 'multi' ) {
        $file .= '_multi' . ".$checksum_mode" . '.bz2';
    }
    else {
        my $atext = '';
        my @archs = split /,/o, $cfg_arch;
        foreach my $ar (@archs) {
            $atext .= '_' . "$ar";
        }
        $file .= "$atext" . ".$checksum_mode" . '.bz2';
    }
    return $file;
}

sub get_cmdline_args {
    my %args;
    my %newcfg;
    my $dbf;
    getopts( 'hr:w:c:meb:f:p:a:Vo:sktiv', \%args );

    if ( defined $args{V} ) {
        print "$software_version\n";
        exit 2;
    }

    # The order of args processing matters...
    #   update cfg_file before default config is read
    set_config( 'cfg_file', $args{f} ) if ( $args{f} );

    #   get configuration
    %newcfg = read_config_file( get_config('cfg_file') );
    update_config(%newcfg);

    #   repository directory
    set_config( 'repo_path', $args{r} ) if ( $args{r} );

    #   number of worker processes, must use defined
    set_config( 'worker_cnt', $args{w} ) if ( defined $args{w} );

    #   checksum mode
    set_config( 'checksum_mode', $args{c} ) if ( $args{c} );

    #   checksum db mode cmdline toggle, must use defined
    if ( defined $args{m} ) {
        set_config( 'db_mode', get_config('db_mode') ? 0 : 1 );
    }

    #   checksum db file
    set_config( 'db_file', $args{b} ) if ( $args{b} );

    #   package uncompress mode
    set_config( 'pkage_cmprs_mode', $args{p} ) if ( $args{p} );

    #   archetecture mode types
    set_config( 'arch_mode', $args{a} ) if ( $args{a} );

    #   error file
    set_config( 'err_file', $args{o} ) if ( $args{o} );

    #   error file mode cmdline toggle, must use defined
    if ( defined $args{s} ) {
        set_config( 'err_mode', get_config('err_mode') ? 0 : 1 );
    }

    #   Release/InRelease checkum mode cmdline toggle, must use defined
    if ( defined $args{k} ) {
        set_config( 'release_mode',
            get_config('release_mode') ? 0 : 1 );
    }

    #   Content checkum mode cmdline toggle, must use defined
    if ( defined $args{t} ) {
        set_config( 'content_checksum_mode',
            get_config('content_checksum_mode') ? 0 : 1 );
    }

    #   i18n translation checkum mode cmdline toggle, must use defined
    if ( defined $args{i} ) {
        set_config( 'i18n_checksum_mode',
            get_config('i18n_checksum_mode') ? 0 : 1 );
    }

    if ( defined $args{v} ) {
        print "vdr-chksums  version  $software_version\n";
        exit 2;
    }

    #   === config updates ===
    $dbf = add_db_file_ext( get_config('db_file'), get_config('checksum_mode'),
        get_config('arch_mode') );
    set_config( 'db_file', $dbf );

    # do -e after config updates, must have -m trigger, No Prompt
    if ( $args{e} ) {
        if ( get_config('db_mode') ) {
            $dbf = get_config('db_file');
            unlink $dbf;
            die "    Erased $dbf file...\n";
        }
        else {
            die "    Invalid, missing -m option\n";
        }
    }

    #   help
    if ( $args{h} ) {
        usage();
    }
}

sub is_arch {
    my $arch = shift @_;

    my $cfg_arch = get_config('arch_mode');

    if ( $cfg_arch =~ /multi/o ) {
        return 1;
    }
    elsif ( $cfg_arch =~ $arch ) {
        return 1;
    }
    else {
        return 0;
    }
}

sub is_archfile {
    my $file = shift @_;

    $file =~ /.+_+(.+?)\.deb$/o;
    return is_arch($1);
}

sub get_pkage_pat {
    my ($uncmp_mode, $release_mode) = @_;

    my $pool_pat  = qr(.*pool\/);
    my %pkage_pat = (
        'none' => qr/.*Packages$/,
        'gz'   => qr/.*Packages.gz$/,
        'xz'   => qr/.*Packages.xz$/,
    );

    my $release_pat = $release_mode ?  qr/.*\/InRelease$/ : qr/.*\/Release$/;
    my $content_pat = qr/.*\/Contents.*/;
    my $i18n_pat    = qr/.*\/i18n\/Translation.*/;
    return $pool_pat, $pkage_pat{$uncmp_mode}, $release_pat, $content_pat,
      $i18n_pat;
}

sub format_key {
    my ( $path, $pattern ) = @_;

    my $idx = index $path, $pattern;
    if ( $idx == -1 ) {
        print "    path: \"$path\"\n    pattern: \"$pattern\"\n";
        die "    Exiting, failed format_key";
    }
    return substr $path, $idx;
}

sub collect_data {

    #   skip diffs .temp dir
    return if ( $File::Find::name =~ /\.temp\// );

    return if ( -d $File::Find::name );

    chomp $File::Find::name;
    if ( $File::Find::name =~ $pool_pattern ) {
        push @pools, $File::Find::name if ( is_archfile($File::Find::name) );
    }
    elsif ( $File::Find::name =~ $package_pattern ) {
        push @packages, $File::Find::name;
    }
    elsif ( $File::Find::name =~ $release_pattern ) {
        push @dist_releases, $File::Find::name;
    }
    elsif ( $File::Find::name =~ $content_pattern ) {
        push @dist_contents, $File::Find::name;
    }
    elsif ( $File::Find::name =~ $i18n_pattern ) {
        push @dist_i18n, $File::Find::name;
    }
}

sub show_elapsed_time {
    my ( $begin, $end ) = @_;

    # assume elapsed time in seconds is < 24 hours
    my $elapsed = $end - $begin;

    # print $OSNAME -> $PROGRAM_NAME
    # print "\nOS: $^O -> program: $0\n";
    printf(
        "Elapsed Time === %02d hrs : %02d mins : %02d secs ===\n",
        $elapsed / ( 60 * 60 ) % 24,
        $elapsed / 60 % 60,
        $elapsed % 60
    );
}

sub close_handle {
    my ( $msg, $hdl ) = @_;

    $msg = $msg . "\n";
    close $hdl or die "$msg";
}

sub close_handle_list {
    my ( $msg, @hdl_list ) = @_;

    my $idx = 0;
    foreach my $item (@hdl_list) {
        close_handle( "$msg: $idx", $item );
        $idx++;
    }
}

sub write_error_file {
    my @e_list = @_;

    my $err_file = get_config('err_file');

    open( my $fh, ">", $err_file )
      or die "write error file failed open: $err_file";

    my $pkg_cmode = get_config('pkage_cmprs_mode');
    print $fh "#!/bin/sh\n\n";
    printf $fh "#    repository: %s\n",            get_config('repo_path');
    printf $fh "#    pkage uncompress mode: %s\n", $pkg_cmode;
    printf $fh "#    architecture type(s): %s\n",  get_config('arch_mode');
    printf $fh "#    checksum mode: %s\n",         get_config('checksum_mode');
    print $fh "#    vdr-chksums: files with bad checksums\n\n";

    foreach my $e (@e_list) {
        print $fh "rm -v $e\n";
    }
    close_handle( "Abort! Failed to close $err_file", $fh );

}

sub write_db_file : prototype($\%) {
    my ( $path, $hash_ref ) = @_;

    #   directory's part of path must exist or open fails
    my $dst = new IO::Compress::Bzip2 $path,
      or die "could not open: $path, Bzip2 failed: $Bzip2Error";
    my $msg   = "#  vdr-chksums\n";
    my $value = get_config('repo_path');
    $msg .= "#  REPOSITORY_PATH:  $value\n";
    $value = get_config('arch_mode');
    $msg .= "#  ARCHITECTURES: $value\n";
    $value = get_config('checksum_mode');
    $msg .= "#  CHECKSUMS:  $value\n";
    print $dst $msg;

    foreach my $key ( sort keys %$hash_ref ) {
        print $dst "$hash_ref->{$key}  $key\n";
    }
    close_handle( "Abort! Failed to close $path", $dst );
}

sub read_db_file : prototype($\%) {
    my ( $file, $hash_ref ) = @_;

    #   clear/empty out hash before open
    %$hash_ref = ();

    my $src = new IO::Uncompress::Bunzip2 $file, Transparent => 0
      or return 1;
    while ( defined( my $line = <$src> ) ) {
        chomp $line;
        next if ( $line =~ /^#/o );
        my ( $value, $key ) = split /\s+/o, $line;
        $hash_ref->{$key} = $value;
    }
    close_handle( "Abort! Failed to close $file", $src );
    return 0;
}

sub find_file {
    my $key = shift @_;

    #   time consumming but full path is needed for error report
    my $rpth = get_config('repo_path');
    my $cmd  = "find $rpth -path */$key -print0";
    my $fpth = qx($cmd);
    return $fpth;
}

sub create_dirs_path {
    my $file = shift @_;

    my $rval = 0;

    #   pull directories from filename
    my ( undef, $path, undef ) = fileparse($file);
    unless ( -d $path ) {
        $rval = 1;
        my $cmd = "mkdir -p $path";
        system $cmd;
    }
    return $rval;
}

sub get_db_checksum : prototype($\@\%) {
    my ( $file, $pools_lref, $chksum_href ) = @_;

    my $pools_cnt = 0;
    my $db_cnt    = 0;
    my @db_pools  = ();
    my ( %db_cksm, $key );

    read_db_file( $file, %db_cksm );

    #   works correctly with empty %hash
    foreach my $item (@$pools_lref) {
        chomp $item;
        $key = format_key( $item, 'pool/' );
        if ( exists $db_cksm{$key} ) {
            $chksum_href->{$key} = $db_cksm{$key};
            $db_cnt++;
        }
        else {
            push @db_pools, $item;
            $pools_cnt++;
        }
    }
    print "*** db checksums = $db_cnt, db pools = $pools_cnt ***\n";

    #   @db_pools is usually small compared to @pools
    return @db_pools;
}

sub get_checksum_pattern {
    my $checksum_mode = shift @_;

    my $fpat = qr/^Filename:/;
    my $apat = qr/^Architecture:/;
    my %cpat = (
        'size'   => qr/^Size:/,
        'md5'    => qr/^MD5sum:/,
        'sha256' => qr/^SHA256:/,
    );
    return $fpat, $cpat{$checksum_mode}, $apat;
}

sub get_checksum_func {
    my $checksum_mode = shift @_;

    my %checksum_func = (
        'size' => sub {
            my $fn = shift @_;
            return -s $fn;
        },
        'md5' => sub {
            my $fn = shift @_;
            return digest_file_hex( $fn, 'MD5' );
        },
        'sha256' => sub {
            my $fn = shift @_;
            return digest_file_hex( $fn, 'SHA-256' );
        },
    );
    return $checksum_func{$checksum_mode};
}

sub get_package_func {
    my $pkcmp_mode = shift @_;

    my %pkage_func = (
        'none' => sub {
            my $file = shift @_;
            open( my $fh, "<", $file )
              or die "pkg_func: none: failed open: $file";
            return $fh;
        },
        'gz' => sub {
            my $file = shift @_;
            open( my $fh, "-|", "gunzip", "-c", "$file" )
              or die "pkg_func: gunzip: failed open: $file";
            return $fh;
        },
        'xz' => sub {
            my $file = shift @_;
            open( my $fh, "-|", "unxz", "-c", "$file" )
              or die "pkg_func: unxz: failed open: $file";
            return $fh;
        },
    );
    return $pkage_func{$pkcmp_mode};
}

sub strings_have_data {
    my @str_list = @_;

    foreach my $s (@str_list) {
        return 0 unless ( length $s );
    }
    return 1;
}

sub pkg_parse_err {
    my ( $file, $arch, $key, $value ) = @_;

    print "    package file == $file\n";
    print "    architecture == \"$arch\"\n";
    print "    filename     == \"$key\"\n";
    print "    checksum     == \"$value\"\n";
    die "    Exiting, Packages parsing error";
}

sub get_package_checksums : prototype($$\@\%) {
    my ( $checksum_mode, $pkage_cmprs_mode, $pkage_lref, $chksum_href ) = @_;

    my ( $arch, $key, $value ) = ( "", "", "" );
    my ( $fpat, $cpat, $apat ) = get_checksum_pattern($checksum_mode);
    my $func_ref = get_package_func($pkage_cmprs_mode);

    foreach my $file (@$pkage_lref) {
        my $src = $func_ref->($file);
        while ( defined( my $line = <$src> ) ) {
            chomp $line;
            if ( $line =~ $apat ) {
                pkg_parse_err( $file, $arch, $key, $value ) if ( length $arch );
                $arch = ( split( /\s+/o, $line ) )[1];
                next;
            }
            if ( $line =~ $fpat ) {
                pkg_parse_err( $file, $arch, $key, $value ) if ( length $key );
                $key = ( split( /\s+/o, $line ) )[1];
                $key = format_key( $key, 'pool/' );
                next;
            }
            if ( $line =~ $cpat ) {
                $value = ( split( /\s+/o, $line ) )[1];
                if ( strings_have_data( $arch, $key, $value ) ) {
                    $chksum_href->{$key} = $value if ( is_arch($arch) );
                    ( $arch, $key, $value ) = ( "", "", "" );
                }
                else {
                    pkg_parse_err( $file, $arch, $key, $value );
                }
            }
        }
        close_handle( "packages checksum read: $file", $src );
    }
}

#   can parse Release or InRelease
sub get_release_checksums : prototype(\@\%) {
    my ( $release_lref, $checksum_href ) = @_;

    #   only SHA256 valid for debian-security
    foreach my $file (@$release_lref) {
        open( my $fh, "<", $file ) or die "g_r_chksums failed open: $file";
        my $checksum_flag = 0;
        my ( $chk_sum, $file_size, $key ) = ( "", "", "" );
        while ( defined( my $line = <$fh> ) ) {
            if ($checksum_flag) {
                last if ( $line =~ /^-----BEGIN\s+PGP\s+SIGNATURE/o );
                ( undef, $chk_sum, $file_size, $key ) = split /\s+/o, $line;
                if ( length $chk_sum and length $file_size and length $key ) {
                    my $release_path = ( fileparse($file) )[1] . $key;
                    my $key = format_key( $release_path, 'dists/' );
                    if ( length $key ) {
                        $checksum_href->{$key} = $chk_sum;
                        ( $chk_sum, $file_size, $key ) = ( "", "", "" );
                    }
                    else {
                        print "    key: \"$key\"\n";
                        die "    Exiting, Release key formating error";
                    }
                }
                else {
                    print "    key:    \"$key\"\n";
                    print "    sha256: \"$chk_sum\"\n";
                    print "    size:   \"$file_size\"\n";
                    die "    Exiting, Release parsing error";
                }
            }
            else {
                $checksum_flag = 1 if ( $line =~ /^SHA256:/o );
            }
        }
    }
}

sub checksum_sha256_files : prototype(\@\%) {
    my ( $pkg_lref, $checksum_href ) = @_;

    my $digest_pat = 'SHA-256';

    foreach my $file (@$pkg_lref) {
        my $key = format_key( $file, 'dists/' );
        if ( exists $checksum_href->{$key} ) {
            my $chk = digest_file_hex( $file, $digest_pat );
            unless ( $chk eq $checksum_href->{$key} ) {
                print "    checksum mode:   SHA256\n";
                print "    checksum file:   $file\n";
                print "    checksum Lookup: $checksum_href->{$key}\n";
                print "    checksum Real:   $chk \n";
                die "    Exiting, bad package checksum";
            }
        }
        else {
            print "    file: \"$file\"\n";
            print "    key:  \"$key\"\n";
            die "    Exiting, missing key in checksum_sha256_files";
        }
    }
}

sub fork_producer {
    my $pid;
    defined( $pid = fork ) or die "Abort!  Failed to Fork Producer!";

    if ($pid) {

        #   parent
        push @child_list, $pid;
        return;
    }
    else {
        # child
        close_handle_list( "producer readers", @prdcr_rdrs );
        close_handle_list( "writers",          @wrtrs );
        close_handle_list( "readers",          @rdrs );

        my $max_workers = get_config('worker_cnt');
        my $pools_ref   = get_list_ref('pools');
        my $wrtr_idx    = 0;
        foreach my $file (@$pools_ref) {
            chomp $file;
            print { $prdcr_wrtrs[$wrtr_idx] } "$file\n";
            $wrtr_idx++;
            $wrtr_idx = 0 if ( $wrtr_idx == $max_workers );
        }
        close_handle_list( "producer writers", @prdcr_wrtrs );
        exit;
    }
}

sub fork_worker {
    my ( $idx, $rdr, $wrtr ) = @_;

    my $pid;
    defined( $pid = fork ) or die "Abort!  Failed to Fork Worker: $idx";

    if ($pid) {

        #   parent
        push @child_list, $pid;
        return;
    }
    else {
        # child
        close_handle( "worker reader: $idx", $rdr );
        close_handle_list( "producer writers", @prdcr_wrtrs );

        my $file;
        my $checksum;
        my $cmode    = get_config('checksum_mode');
        my $func_ref = get_checksum_func($cmode);

        my $prdcr_rdr = $prdcr_rdrs[$idx];
        while ( defined( my $file = <$prdcr_rdr> ) ) {
            chomp $file;
            $checksum = $func_ref->($file);
            my $key = format_key( $file, 'pool/' );
            $checksum .= '  ' . $key;
            print $wrtr "$checksum\n";
        }
        close_handle( "worker producer reader: $idx", $prdcr_rdr );
        close_handle( "worker wrtr: $idx",            $wrtr );
        exit;
    }
}

sub startup_workers {
    my $max_workers = get_config('worker_cnt');

    #   tx, rx process comm links
    for ( my $i = 0 ; $i < $max_workers ; $i++ ) {
        my $msg = "Unable to Create rd/wr pipes";
        pipe $rdrs[$i],       $wrtrs[$i]       or die $msg;
        pipe $prdcr_rdrs[$i], $prdcr_wrtrs[$i] or die $msg;
    }

    #   tx files to checksum
    fork_producer();

    #   rx files to checksum, tx checksum message
    for ( my $i = 0 ; $i < $max_workers ; $i++ ) {
        fork_worker( $i, $rdrs[$i], $wrtrs[$i] );
    }

    # close unused comm links per-process
    close_handle_list( "writers",          @wrtrs );
    close_handle_list( "producer writers", @prdcr_wrtrs );
    close_handle_list( "producer readers", @prdcr_rdrs );
}

sub main::HELP_MESSAGE() {
    usage();
}

# --- subs ---

$Getopt::Std::STANDARD_HELP_VERSION = 1;
$main::VERSION                      = "$software_version";

get_cmdline_args();

# +++ Packages, pools, checksums, architectures +++
print "*** architecture mode: $config{'arch_mode'} ***\n";
print "*** checksum mode:     $config{'checksum_mode'} ***\n";
print "*** collecting data:   $config{'repo_path'}, Please wait... ***\n";
my @dirs_list;
push @dirs_list, $config{'repo_path'};
(
    $pool_pattern,    $package_pattern, $release_pattern,
    $content_pattern, $i18n_pattern
) = get_pkage_pat( $config{'pkage_cmprs_mode'}, $config{'release_mode'} );
find( \&collect_data, @dirs_list );

die "    Exiting, no pools found" if ( scalar(@pools) == 0 );
die "    Exiting, no packages found" if ( scalar(@packages) == 0 );
die "    Exiting, no releases found" if ( scalar(@dist_releases) == 0 );
warn "    No Contents files found\n" if ( scalar(@dist_contents) == 0 );
warn "    No i18n Translation files found\n" if ( scalar(@dist_i18n) == 0 );

my $release_msg = "Release";
$release_msg = "InRelease" if ( $config{'release_mode'} );
print "*** parse $release_msg file checksums...\n";
get_release_checksums( @dist_releases, %dist_release_checksum );

if ( scalar( keys %dist_release_checksum) == 0 ) {
    die "    Exiting, no $release_msg checksums found"
}

print "*** parse package file checksums...\n";
checksum_sha256_files( @packages, %dist_release_checksum );

if ( get_config('content_checksum_mode') ) {
    print "*** parse content file checksums...\n";
    die "no Contents to checksum" unless ( scalar(@dist_contents) );
    checksum_sha256_files( @dist_contents, %dist_release_checksum );
}

if ( get_config('i18n_checksum_mode') ) {
    print "*** parse i18n    file checksums...\n";
    die "no i18n Translations to checksum" unless ( scalar(@dist_i18n) );
    checksum_sha256_files( @dist_i18n, %dist_release_checksum );
}

print "*** packages compress mode: $config{'pkage_cmprs_mode'} ***\n";

print "*** collect package lookup checksums... ***\n";
get_package_checksums( $config{'checksum_mode'}, $config{'pkage_cmprs_mode'},
    @packages, %package_checksum );

if ( scalar( keys %package_checksum ) == 0 ) {
    die "    Exiting, no package checksums found";
}

if ( $config{'db_mode'} and -f $config{'db_file'} ) {
    @pools = get_db_checksum( $config{'db_file'}, @pools, %pool_checksum );
}

if ( scalar(@pools) ) {
    printf "*** collect pool checksums, pools = %d files, Please wait...\n",
      scalar(@pools);
    startup_workers();
    printf "*** workers count: %d ***\n", $config{'worker_cnt'};

    my $inc_pcnt = 10;
    my $percent  = $inc_pcnt;

    # group_size = total_files / how_many_groups_per_%
    my $pcnt_threshold = int( scalar(@pools) / ( 100 / $inc_pcnt ) );
    $pcnt_threshold = 1 if ( $pcnt_threshold == 0 );

    #   $|, $OUTPUT_AUTOFLUSH: force flush on each print
    local $| = 1;
    my $file_cnt = 0;
    my ( $key, $value );
    print "    calculating: 1% ";
  WHILE1: while (1) {
        foreach my $rdr (@rdrs) {
            if ( defined( my $item = <$rdr> ) ) {
                chomp $item;
                $file_cnt++;
                if ( ( $file_cnt % $pcnt_threshold ) == 0 ) {
                    print "$percent\% " if ( $percent < 100 );
                    $percent += $inc_pcnt;
                }
                ( $value, $key ) = split( /\s+/o, $item );
                unless ( exists $pool_checksum{$key} ) {
                    $pool_checksum{$key} = $value;
                }
                else {
                    print "\n    checksum= \"$value\"\n    key= \"$key\"\n";
                    die "    Abort! Error, key exists";
                }
            }
            else {
                sleep 0.3;
            }
            last WHILE1 if ( $file_cnt == scalar(@pools) );
        }    # foreach
    }    # while
    print "100\%, $file_cnt files\n";

    close_handle_list( "readers", @rdrs );
    foreach my $pid (@child_list) {
        waitpid( $pid, 0 );
    }
}    #   if scalar(@pools)

print "*** compare package to pool checksums ***\n";
my $errors     = 0;
my $max_errors = 15;
my $fpath;
my @err_list = ();

foreach my $key ( sort keys %pool_checksum ) {
    if ( exists $package_checksum{$key} ) {
        unless ( $pool_checksum{$key} eq $package_checksum{$key} ) {
            $errors++;
            $fpath = find_file($key);
            print "Checksum Error! $errors of limit $max_errors: $fpath !=\n";
            print "    $package_checksum{$key}\n\n";
            push @err_list, $fpath;
        }
    }
    else {
        #   missing Packages key, value
        $errors++;
        $fpath = find_file($key);
        print "Packages key Error!: $errors of limit $max_errors ";
        print "Packages missing/corrupt. try -p\n";
        print "    $fpath\n\n";

    }
    last if ( $errors >= $max_errors );
}

my $exit_status = 0;
print "*****  $errors errors found *****\n";
if ($errors) {
    print "+++ Remove bad files and rerun mirror again +++ \n";
    if ( get_config('err_mode') and ( scalar(@err_list) ) ) {
        print "see \"" . get_config('err_file') . "\"\n";
        write_error_file(@err_list);
    }
    $exit_status = 1;
}
else {
    #   0 errors...
    if ( $config{'db_mode'} ) {
        my $file = $config{'db_file'};
        if ( create_dirs_path( $config{'db_file'} ) ) {
            print "    creating needed db directory path\n";
        }
        print "    updating db mode: $file\n";
        write_db_file( $file, %pool_checksum );
    }
}

# $^T, $BASETIME == program start time
show_elapsed_time( $^T, time() );

exit $exit_status;
